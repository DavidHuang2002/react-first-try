{"version":3,"sources":["Table.js","Form.js","App.js","index.js"],"names":["TableHeader","TableBody","props","rows","charactersData","map","row","index","name","job","onClick","removeCharacter","Table","Form","initialState","state","handleChange","event","target","value","setState","submitForm","handleSubmit","this","htmlFor","type","id","onChange","Component","App","characters","indexToRm","editedCharacters","filter","elem","characterToAdd","ReactDOM","render","document","getElementById"],"mappings":"gOAEMA,EAAc,WAGlB,OACE,gCACD,+BACC,sCACA,2CAMEC,EAAY,SAAAC,GACjB,IAAMC,EAAOD,EAAME,eAAeC,KACjC,SAACC,EAAKC,GACL,OACC,+BACC,6BAAKD,EAAIE,OACT,6BAAKF,EAAIG,MACT,6BACC,wBAAQC,QAAS,WAAKR,EAAMS,gBAAgBJ,IAA5C,wBAJOA,MAaZ,OAGC,aAFA,CAEA,kBAAQJ,KAeKS,EAXD,SAACV,GACd,IAAOE,EAAmCF,EAAnCE,eAAgBO,EAAmBT,EAAnBS,gBAEvB,OACE,kCACC,cAAC,EAAD,IACA,cAAC,EAAD,CAAWP,eAAgBA,EAAgBO,gBAAiBA,Q,OC3C1DE,E,4MAGFC,aAAe,CACXN,KAAM,GACNC,IAAK,I,EAGTM,MAAQ,EAAKD,a,EAEbE,aAAe,SAACC,GAEZ,MAAsBA,EAAMC,OAArBV,EAAP,EAAOA,KAAMW,EAAb,EAAaA,MAEb,EAAKC,SAAL,eACMZ,EAAOW,K,EAIjBE,WAAa,WACT,EAAKnB,MAAMoB,aAAa,EAAKP,OAE7B,EAAKK,SAAS,EAAKN,e,4CAGvB,WACI,MAAoBS,KAAKR,MAAlBP,EAAP,EAAOA,KAAMC,EAAb,EAAaA,IAEb,OACI,iCACI,uBAAOe,QAAQ,OAAf,mBACA,uBACAC,KAAK,OACLjB,KAAK,OACLkB,GAAG,OAIHP,MAASX,EACTmB,SAAUJ,KAAKP,eAGf,uBAAOQ,QAAQ,MAAf,kBACA,uBACAC,KAAK,OACLjB,KAAK,MACLkB,GAAG,MACHP,MAASV,EACTkB,SAAUJ,KAAKP,eAEf,uBACAS,KAAK,SACLN,MAAM,SACNT,QAASa,KAAKF,oB,GArDXO,aA6DJf,IC3DTgB,E,4MAkBJd,MAAQ,CACNe,WAAY,I,EAUdnB,gBAAkB,SAAAoB,GAChB,IAEMC,EAFe,EAAKjB,MAAnBe,WAGMG,QACT,SAACC,EAAM3B,GAAW,OAAQA,IAAUwB,KAIxC,EAAKX,SAAS,CAACU,WAAYE,K,EAG7BV,aAAe,SAACa,GACd,IAAOL,EAAc,EAAKf,MAAnBe,WAEP,EAAKV,SAAS,CACZU,WAAW,GAAD,mBAAMA,GAAN,CAAkBK,O,4CAIhC,WAGE,IAAOL,EAAcP,KAAKR,MAAnBe,WAEP,OAGE,cAFA,CAEA,iBACE,cAAC,EAAD,CAAO1B,eAAgB0B,EAAYnB,gBAAiBY,KAAKZ,kBACzD,cAAC,EAAD,CAAMW,aAAcC,KAAKD,sB,GA3DfM,aAiEHC,IC/DfO,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.af783b72.chunk.js","sourcesContent":["import React, {Component} from 'react'\n\nconst TableHeader = () => {\n\t\n\n  return (\n    <thead>\n\t\t\t<tr>\n\t\t\t\t<th>Name</th> \n\t\t\t\t<th>Job</th>\n\t\t\t</tr>\n\t\t</thead>\n\t);\n}\n\nconst TableBody = props => {\n\tconst rows = props.charactersData.map(\n\t\t(row, index) => {\n\t\t\treturn (\n\t\t\t\t<tr key={index}>\n\t\t\t\t\t<td>{row.name}</td>\n\t\t\t\t\t<td>{row.job}</td>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<button onClick={()=>{props.removeCharacter(index);}}>\n\t\t\t\t\t\t\tDelete\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t)\n\t\t}\n\t)\n\n\treturn (\n\t\t// not 100% certain, but seems like the JSX can automatically interpret an array\n\t\t// of other JSX elements\n\t\t<tbody>{rows}</tbody>\n\t);\n}\n\nconst Table = (props) => {\n\tconst {charactersData, removeCharacter} = props;\n\n\treturn (\n\t\t\t<table>\n\t\t\t\t<TableHeader/>\n\t\t\t\t<TableBody charactersData={charactersData} removeCharacter={removeCharacter}/>\n\t\t\t</table>\n\t\t);\n}\n\nexport default Table;","import React, {Component} from 'react';\n\nclass Form extends Component {\n\n    // only keep track of the one character\n    initialState = {\n        name: '',\n        job: ''\n    };\n\n    state = this.initialState;\n\n    handleChange = (event) => {\n        // target seems to be a name - value pair\n        const {name, value} = event.target;\n\n        this.setState(\n            {[name]: value}\n        );\n    };\n\n    submitForm = () => {\n        this.props.handleSubmit(this.state);\n        // dont forget to reset back to initial state\n        this.setState(this.initialState);\n    }\n\n    render(){\n        const {name, job} = this.state;\n\n        return (\n            <form>\n                <label htmlFor=\"name\">Name:</label>\n                <input\n                type='text'\n                name='name'\n                id='name'\n                // not sure whats the use of value; for consistency maybe?\n                // ok I get it now. in submit form there is a step that resets state to initialState\n                // this is a means of resetting the input fields, pretty clever\n                value = {name}\n                onChange={this.handleChange}\n                />\n\n                <label htmlFor=\"job\">Job:</label>\n                <input\n                type='text'\n                name='job'\n                id='job'\n                value = {job}\n                onChange={this.handleChange}\n                />\n                <input\n                type='button'\n                value='Submit'\n                onClick={this.submitForm}\n                />\n            </form>\n        );\n    }\n\n}\n\nexport default Form;","import React, {Component} from 'react';\nimport Table from './Table';\nimport Form from './Form';\n\nclass App extends Component { \n  // state = {\n  //   characters: [\n  //     {\n  //       name: 'David',\n  //       job: 'Loafer'\n  //     },\n  //     {\n  //       name: 'John',\n  //       job: 'Goldfish trainer'\n  //     },\n  //     {\n  //       name: 'Jack',\n  //       job: 'the Rapper'\n  //     },\n  //   ]\n  // };\n\n  state = {\n    characters: [],\n  };\n\n  // !important note: this function has to be an arrow func\n  // because arrow function inherits its enclosing scope instead of creating a \n  // scope for itself like normal func does\n\n  // if we use a normal func here, we will have to write a constructor func\n  // which binds the removeCharater to its scope to make sure 'this' refers to the\n  // scope of App\n  removeCharacter = indexToRm => {\n    const {characters} = this.state;\n    \n    const editedCharacters = (\n      characters.filter(\n        (elem, index) => {return (index !== indexToRm);}\n      )\n    );\n\n    this.setState({characters: editedCharacters});\n  }; \n\n  handleSubmit = (characterToAdd) => {\n    const {characters} = this.state;\n\n    this.setState({\n      characters: [...characters, characterToAdd]\n    });\n  };\n\n  render() {\n    // the {} here does the unpacking\n    // like let {a, b, c} = obj is equivalent to let a = obj.a; let b =...\n    const {characters} = this.state;\n\n    return (\n      // the div here is necessary because \n      // \"Adjacent JSX elements must be wrapped in an enclosing tag\"\n      <div>\n        <Table charactersData={characters} removeCharacter={this.removeCharacter}/>\n        <Form handleSubmit={this.handleSubmit}/>\n      </div>\n    )\n  };\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './Api';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}